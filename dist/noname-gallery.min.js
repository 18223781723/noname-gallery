(function () { 'use strict'; function a(a) { if (0 === a.list.length) throw new Error("options.list can not be empty array"); this.options = Object.assign({}, this.defaults, a) } a.prototype.defaults = { list: [], index: 0, fadeInOut: !0, useTransform: !0, verticalZoom: !0, openKeyboard: !1, zoomToScreenCenter: !1, duration: 300, minScale: 1.5 }, a.prototype.init = function () { this.setProperties(), this.setWindowSize(), this.setPreviewList(), this.setWrap(), this.render(), this.getElement(), this.bindEventListener(), this.open() }, a.prototype.setProperties = function () { this.container = null, this.bg = null, this.counter = null, this.wrap = null, this.imgList = null, this.bgOpacity = 1, this.windowWidth = 0, this.windowHeight = 0, this.index = this.options.index, this.wrapWidth = 0, this.wrapX = 0, this.previewList = [], this.currentImg = { x: 0, y: 0, width: 0, height: 0, scale: 1, opacity: 1, status: "" }, this.pointers = [], this.point1 = { x: 0, y: 0 }, this.point2 = { x: 0, y: 0 }, this.diff = { x: 0, y: 0 }, this.distance = { x: 0, y: 0 }, this.lastDistance = { x: 0, y: 0 }, this.lastPoint1 = { x: 0, y: 0 }, this.lastPoint2 = { x: 0, y: 0 }, this.lastMove = { x: 0, y: 0 }, this.lastCenter = { x: 0, y: 0 }, this.tapCount = 0, this.dragDirection = "", this.dragTarget = "", this.status = "", this.isPointerdown = !1, this.isAnimating = !0, this.isWrapAnimating = !1, this.tapTimeout = null, this.pointerdownTime = null, this.pointermoveTime = null, this.pinchTime = null, this.inertiaRafId = null, this.wrapRafId = null }, a.prototype.setWindowSize = function () { this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight }, a.prototype.setPreviewList = function () { for (const a of this.options.list) { const b = a.getBoundingClientRect(), c = this.getImgSize(a.naturalWidth, a.naturalHeight, this.windowWidth, this.windowHeight), d = Math.max(this.decimal(a.naturalWidth / c.width, 5), this.options.minScale); this.previewList.push({ x: this.decimal((this.windowWidth - c.width) / 2, 2), y: this.decimal((this.windowHeight - c.height) / 2, 2), width: this.decimal(c.width, 2), height: this.decimal(c.height, 2), maxWidth: this.decimal(c.width * d, 2), maxHeight: this.decimal(c.height * d, 2), maxScale: d, thumbnail: { x: this.decimal(b.left, 2), y: this.decimal(b.top, 2), width: this.decimal(b.width, 2), height: this.decimal(b.height, 2), scaleX: this.decimal(b.width / c.width, 5), scaleY: this.decimal(b.height / c.height, 5) } }) } }, a.prototype.setCurrentImg = function (a, b, c, d, e, f, g) { this.currentImg = { x: a, y: b, width: c, height: d, scale: e, opacity: f, status: g } }, a.prototype.setWrap = function () { this.wrapWidth = this.previewList.length * this.windowWidth, this.wrapX = -1 * (this.index * this.windowWidth) }, a.prototype.render = function () { let a = "opacity: 0;"; this.options.useTransform && (a += "transition: opacity " + this.options.duration + "ms ease-out;"); let b = "<div class=\"noname-gallery-container\"><div class=\"noname-gallery-bg\" style=\"" + a + "\"></div><div class=\"noname-gallery-counter\">" + (this.options.index + 1) + " / " + this.options.list.length + "</div><ul class=\"noname-gallery-wrap\" style=\"width: " + this.wrapWidth + "px; transform: translate3d(" + this.wrapX + "px, 0, 0)\">"; for (let c = 0, d = this.options.list.length; c < d; c++) { const d = this.previewList[c]; this.options.useTransform ? (a = "width: " + d.width + "px; height: " + d.height + "px;", a += this.index === c ? "transform: translate3d(" + d.thumbnail.x + "px, " + d.thumbnail.y + "px, 0) scale(" + d.thumbnail.scaleX + ", " + d.thumbnail.scaleY + ");" : "transform: translate3d(" + d.x + "px, " + d.y + "px, 0) scale(1);", a += "transition: transform " + this.options.duration + "ms ease-out, opacity " + this.options.duration + "ms ease-out;") : this.index === c ? (a = "width: " + d.thumbnail.width + "px; height: " + d.thumbnail.height + "px;", a += "transform: translate3d(" + d.thumbnail.x + "px, " + d.thumbnail.y + "px, 0);") : (a = "width: " + d.width + "px; height: " + d.height + "px;", a += "transform: translate3d(" + d.x + "px, " + d.y + "px, 0);"), this.index === c && this.options.fadeInOut && (a += "opacity: 0;"), a += "cursor: zoom-in;", b += "<li><img class=\"noname-gallery-img\" src=\"" + this.options.list[c].src + "\" alt=\"\" style=\"" + a + "\"></li>" } b += "</ul></div>", document.body.insertAdjacentHTML("beforeend", b) }, a.prototype.getElement = function () { this.container = document.querySelector(".noname-gallery-container"), this.bg = document.querySelector(".noname-gallery-bg"), this.counter = document.querySelector(".noname-gallery-counter"), this.wrap = document.querySelector(".noname-gallery-wrap"), this.imgList = document.querySelectorAll(".noname-gallery-img"); for (let a = 0, b = this.imgList.length; a < b; a++)this.previewList[a].element = this.imgList[a] }, a.prototype.open = function () { const a = this.previewList[this.index]; if (this.options.useTransform) window.getComputedStyle(a.element).opacity, this.bg.style.opacity = "1", this.options.fadeInOut && (a.element.style.opacity = "1"), a.element.style.transform = "translate3d(" + a.x + "px," + a.y + "px, 0) scale(1)"; else { const b = { bg: { opacity: { from: 0, to: 1 } }, img: { width: { from: a.thumbnail.width, to: a.width }, height: { from: a.thumbnail.height, to: a.height }, x: { from: a.thumbnail.x, to: a.x }, y: { from: a.thumbnail.y, to: a.y }, index: this.index } }; this.options.fadeInOut && (b.img.opacity = { from: 0, to: 1 }), this.raf(b) } this.setCurrentImg(a.x, a.y, a.width, a.height, 1, 1, "") }, a.prototype.close = function () { this.isAnimating = !0, this.status = "close"; const a = this.previewList[this.index]; if (this.options.useTransform) this.options.fadeInOut && (a.element.style.opacity = "0"), a.element.style.transition = "transform " + this.options.duration + "ms ease-out, opacity " + this.options.duration + "ms ease-out", a.element.style.transform = "translate3d(" + a.thumbnail.x + "px, " + a.thumbnail.y + "px, 0) scale(" + a.thumbnail.scaleX + ", " + a.thumbnail.scaleY + ")", this.bg.style.transition = "opacity " + this.options.duration + "ms ease-out", this.bg.style.opacity = "0"; else { const b = { bg: { opacity: { from: this.bgOpacity, to: 0 } }, img: { width: { from: this.currentImg.width, to: a.thumbnail.width }, height: { from: this.currentImg.height, to: a.thumbnail.height }, x: { from: this.currentImg.x, to: a.thumbnail.x }, y: { from: this.currentImg.y, to: a.thumbnail.y }, index: this.index } }; this.options.fadeInOut && (b.img.opacity = { from: 1, to: 0 }), this.raf(b) } }, a.prototype.bindEventListener = function () { this.handlePointerdown = this.handlePointerdown.bind(this), this.handlePointermove = this.handlePointermove.bind(this), this.handlePointerup = this.handlePointerup.bind(this), this.handlePointercancel = this.handlePointercancel.bind(this), this.handleResize = this.handleResize.bind(this), this.handleTransitionEnd = this.handleTransitionEnd.bind(this), this.container.addEventListener("pointerdown", this.handlePointerdown), this.container.addEventListener("pointermove", this.handlePointermove), this.container.addEventListener("pointerup", this.handlePointerup), this.container.addEventListener("pointercancel", this.handlePointercancel), this.container.addEventListener("transitionend", this.handleTransitionEnd), window.addEventListener("resize", this.handleResize), window.addEventListener("orientationchange", this.handleResize), this.options.openKeyboard && (this.handleKeydown = this.handleKeydown.bind(this), window.addEventListener("keydown", this.handleKeydown)) }, a.prototype.unbindEventListener = function () { this.container.removeEventListener("pointerdown", this.handlePointerdown), this.container.removeEventListener("pointermove", this.handlePointermove), this.container.removeEventListener("pointerup", this.handlePointerup), this.container.removeEventListener("pointercancel", this.handlePointercancel), this.container.removeEventListener("transitionend", this.handleTransitionEnd), window.removeEventListener("resize", this.handleResize), window.removeEventListener("orientationchange", this.handleResize), this.options.openKeyboard && window.removeEventListener("keydown", this.handleKeydown) }, a.prototype.handlePointerdown = function (a) { "mouse" === a.pointerType && 0 !== a.button || this.isAnimating || (this.pointers.push(a), this.point1 = { x: this.pointers[0].clientX, y: this.pointers[0].clientY }, 1 === this.pointers.length ? (this.container.setPointerCapture(a.pointerId), this.isPointerdown = !0, this.distance = { x: 0, y: 0 }, this.lastDistance = { x: 0, y: 0 }, this.pointerdownTime = Date.now(), this.pinchTime = null, this.lastMove = { x: this.pointers[0].clientX, y: this.pointers[0].clientY }, !1 === this.isWrapAnimating && this.tapCount++, 1 < this.tapCount && (30 < Math.abs(this.point1.x - this.lastPoint1.x) || 30 < Math.abs(this.point1.y - this.lastPoint1.y)) && (this.tapCount = 1), clearTimeout(this.tapTimeout), window.cancelAnimationFrame(this.inertiaRafId), window.cancelAnimationFrame(this.wrapRafId)) : 2 === this.pointers.length && (this.tapCount = 0, this.point2 = { x: this.pointers[1].clientX, y: this.pointers[1].clientY }, this.lastCenter = this.getCenter(this.point1, this.point2), this.lastDistance = { x: this.distance.x, y: this.distance.y }, this.lastPoint2 = { x: this.pointers[1].clientX, y: this.pointers[1].clientY }, "" === this.dragTarget && (this.dragTarget = "img")), this.lastPoint1 = { x: this.pointers[0].clientX, y: this.pointers[0].clientY }) }, a.prototype.handlePointermove = function (a) { if (this.isPointerdown) { this.handlePointers(a, "update"); const b = { x: this.pointers[0].clientX, y: this.pointers[0].clientY }; if (1 === this.pointers.length) this.diff = { x: b.x - this.lastMove.x, y: b.y - this.lastMove.y }, this.distance = { x: b.x - this.point1.x + this.lastDistance.x, y: b.y - this.point1.y + this.lastDistance.y }, this.lastMove = { x: b.x, y: b.y }, this.pointermoveTime = Date.now(), (10 < Math.abs(this.distance.x) || 10 < Math.abs(this.distance.y)) && (this.tapCount = 0, "" === this.dragDirection && "" === this.dragTarget && (this.getDragDirection(), this.getDragTarget())), "wrap" === this.dragTarget ? this.handleWrapPointermove() : "img" === this.dragTarget && this.handleImgPointermove(); else if (2 === this.pointers.length) { const a = { x: this.pointers[1].clientX, y: this.pointers[1].clientY }; "img" === this.dragTarget && "verticalToClose" !== this.currentImg.status && this.handlePinch(b, a), this.lastPoint1 = { x: b.x, y: b.y }, this.lastPoint2 = { x: a.x, y: a.y } } a.preventDefault() } }, a.prototype.handlePointerup = function (a) { this.isPointerdown && (this.handlePointers(a, "delete"), 0 === this.pointers.length ? (this.isPointerdown = !1, 0 === this.tapCount ? "wrap" === this.dragTarget ? this.handleWrapPointerup() : "img" === this.dragTarget && this.handleImgPointerup() : 1 === this.tapCount ? "mouse" === a.pointerType ? a.clientX >= this.currentImg.x && a.clientX <= this.currentImg.x + this.currentImg.width && a.clientY >= this.currentImg.y && a.clientY <= this.currentImg.y + this.currentImg.height ? this.handleZoom({ x: a.clientX, y: a.clientY }) : this.close() : 500 > Date.now() - this.pointerdownTime ? this.tapTimeout = setTimeout(() => { this.close() }, 250) : this.tapCount = 0 : 1 < this.tapCount && this.handleZoom({ x: a.clientX, y: a.clientY })) : 1 === this.pointers.length && (this.point1 = { x: this.pointers[0].clientX, y: this.pointers[0].clientY }, this.lastMove = { x: this.pointers[0].clientX, y: this.pointers[0].clientY })) }, a.prototype.handlePointercancel = function () { this.tapCount = 0, this.isPointerdown = !1, this.pointers.length = 0, this.isWrapAnimating && this.handleWrapPointerup() }, a.prototype.handlePointers = function (a, b) { for (let c = 0; c < this.pointers.length; c++)this.pointers[c].pointerId === a.pointerId && ("update" === b ? this.pointers[c] = a : "delete" == b && this.pointers.splice(c, 1)) }, a.prototype.handleResize = function () { this.setWindowSize(), this.previewList.length = 0, this.setPreviewList(); const a = this.previewList[this.index]; this.setCurrentImg(a.x, a.y, a.width, a.height, 1, 1, ""), this.setWrap(), this.wrap.style.width = this.wrapWidth + "px", this.wrap.style.transform = "translate3d(" + this.wrapX + "px, 0, 0)"; for (let a = 0, b = this.imgList.length; a < b; a++) { const b = this.previewList[a]; b.element = this.imgList[a], b.element.style.width = b.width + "px", b.element.style.height = b.height + "px", this.options.useTransform ? (b.element.style.transition = "none", b.element.style.transform = "translate3d(" + b.x + "px, " + b.y + "px, 0) scale(1)") : b.element.style.transform = "translate3d(" + b.x + "px, " + b.y + "px, 0)", b.element.style.cursor = "zoom-in" } this.options.useTransform && (this.bg.style.transition = "none"), this.bgOpacity = 1, this.bg.style.opacity = this.bgOpacity, this.tapCount = 0 }, a.prototype.handleKeydown = function (a) { if (!(this.isAnimating || this.isWrapAnimating)) { const b = this.index; "Escape" === a.key ? this.close() : ["ArrowLeft", "ArrowUp"].includes(a.key) && 0 < b ? this.index-- : ["ArrowRight", "ArrowDown"].includes(a.key) && b < this.previewList.length - 1 && this.index++, window.cancelAnimationFrame(this.inertiaRafId), this.handleWrapSwipe(), this.handleLastImg(b) } }, a.prototype.handleZoom = function (a) { this.isAnimating = !0, this.tapCount = 0; const b = this.previewList[this.index]; if (1 < this.currentImg.scale) { if (this.options.useTransform) b.element.style.transition = "transform " + this.options.duration + "ms ease-out, opacity " + this.options.duration + "ms ease-out", b.element.style.transform = "translate3d(" + b.x + "px," + b.y + "px, 0) scale(1)"; else { const a = { img: { width: { from: this.currentImg.width, to: b.width }, height: { from: this.currentImg.height, to: b.height }, x: { from: this.currentImg.x, to: b.x }, y: { from: this.currentImg.y, to: b.y }, index: this.index } }; this.raf(a) } b.element.style.cursor = "zoom-in", this.setCurrentImg(b.x, b.y, b.width, b.height, 1, 1, "") } else { const c = this.windowWidth / 2, d = this.windowHeight / 2, e = this.decimal((a.x - b.x) * b.maxScale, 2), f = this.decimal((a.y - b.y) * b.maxScale, 2); let g, h; if (b.maxWidth > this.windowWidth ? (g = this.options.zoomToScreenCenter ? c - e : a.x - e, 0 < g ? g = 0 : g < this.windowWidth - b.maxWidth && (g = this.windowWidth - b.maxWidth)) : g = (this.windowWidth - b.maxWidth) / 2, g = this.decimal(g, 2), b.maxHeight > this.windowHeight ? (h = this.options.zoomToScreenCenter ? d - f : a.y - f, 0 < h ? h = 0 : h < this.windowHeight - b.maxHeight && (h = this.windowHeight - b.maxHeight)) : h = (this.windowHeight - b.maxHeight) / 2, h = this.decimal(h, 2), this.options.useTransform) b.element.style.transition = "transform " + this.options.duration + "ms ease-out, opacity " + this.options.duration + "ms ease-out", b.element.style.transform = "translate3d(" + g + "px," + h + "px, 0) scale(" + b.maxScale + ")"; else { const a = { img: { width: { from: b.width, to: b.maxWidth }, height: { from: b.height, to: b.maxHeight }, x: { from: b.x, to: g }, y: { from: b.y, to: h }, index: this.index } }; this.raf(a) } b.element.style.cursor = "zoom-out", this.setCurrentImg(g, h, b.maxWidth, b.maxHeight, b.maxScale, 1, "") } }, a.prototype.handlePinch = function (c, a) { const b = .7; this.pinchTime = Date.now(); let d = this.getDistance(c, a) / this.getDistance(this.lastPoint1, this.lastPoint2); this.currentImg.scale = this.decimal(this.currentImg.scale * d, 5), this.currentImg.width = this.decimal(this.currentImg.width * d, 2), this.currentImg.height = this.decimal(this.currentImg.height * d, 2); const e = this.previewList[this.index]; this.currentImg.scale > e.maxScale ? (this.currentImg.scale = e.maxScale, this.currentImg.width = e.maxWidth, this.currentImg.height = e.maxHeight, d = 1) : this.currentImg.scale < b && (this.currentImg.scale = b, this.currentImg.width = this.decimal(e.width * b, 2), this.currentImg.height = this.decimal(e.height * b, 2), d = 1), this.currentImg.status = 1 > this.currentImg.scale ? "shrink" : ""; const f = this.getCenter(c, a); this.currentImg.x -= (d - 1) * (f.x - this.currentImg.x) - f.x + this.lastCenter.x, this.currentImg.y -= (d - 1) * (f.y - this.currentImg.y) - f.y + this.lastCenter.y, this.lastCenter = { x: f.x, y: f.y }, this.handleBoundary(), this.options.useTransform ? (e.element.style.transition = "none", e.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0) scale(" + this.currentImg.scale + ")") : (e.element.style.width = this.currentImg.width + "px", e.element.style.height = this.currentImg.height + "px", e.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0)") }, a.prototype.handleBoundary = function () { this.currentImg.width > this.windowWidth ? 0 < this.currentImg.x ? this.currentImg.x = 0 : this.currentImg.x < this.windowWidth - this.currentImg.width && (this.currentImg.x = this.windowWidth - this.currentImg.width) : this.currentImg.x = (this.windowWidth - this.currentImg.width) / 2, this.currentImg.height > this.windowHeight ? 0 < this.currentImg.y ? this.currentImg.y = 0 : this.currentImg.y < this.windowHeight - this.currentImg.height && (this.currentImg.y = this.windowHeight - this.currentImg.height) : this.currentImg.y = (this.windowHeight - this.currentImg.height) / 2 }, a.prototype.getImgSize = function (a, b, c, d) { let e, f; return a / b >= c / d ? a > c ? (e = c, f = c / a * b) : (e = a, f = b) : b > d ? (e = d / b * a, f = d) : (e = a, f = b), { width: e, height: f } }, a.prototype.getDragDirection = function () { this.dragDirection = Math.abs(this.distance.x) > Math.abs(this.distance.y) ? "h" : "v" }, a.prototype.getDragTarget = function () { let a = !1, b = !1; this.currentImg.width > this.windowWidth ? (0 < this.diff.x && 0 === this.currentImg.x || 0 > this.diff.x && this.currentImg.x === this.windowWidth - this.currentImg.width) && (a = !0) : this.currentImg.width >= this.previewList[this.index].width && (b = !0), this.dragTarget = "h" === this.dragDirection && (a || b) ? "wrap" : "img" }, a.prototype.getDistance = function (c, a) { const b = c.x - a.x, d = c.y - a.y; return Math.hypot(b, d) }, a.prototype.handleWrapPointermove = function () { if (0 < this.wrapX || this.wrapX < -1 * ((this.previewList.length - 1) * this.windowWidth)) this.wrapX += .3 * this.diff.x; else { this.wrapX += this.diff.x; const a = -1 * ((this.index - 1) * this.windowWidth), b = -1 * ((this.index + 1) * this.windowWidth); this.wrapX > a ? this.wrapX = a : this.wrapX < b && (this.wrapX = b) } this.wrap.style.transform = "translate3d(" + this.wrapX + "px, 0, 0)" }, a.prototype.handleImgPointermove = function () { const a = this.previewList[this.index]; this.currentImg.width > this.windowWidth || this.currentImg.height > this.windowHeight ? (this.currentImg.x += this.diff.x, this.currentImg.y += this.diff.y, this.handleBoundary(), this.currentImg.status = "inertia", this.options.useTransform ? (a.element.style.transition = "none", a.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0) scale(" + this.currentImg.scale + ")") : a.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0)") : "v" === this.dragDirection && this.currentImg.width <= a.width && this.currentImg.height <= a.height && (this.currentImg.status = "verticalToClose", this.bgOpacity = this.decimal(1 - Math.abs(this.distance.y) / (this.windowHeight / 1.2), 5), 0 > this.bgOpacity && (this.bgOpacity = 0), this.options.verticalZoom ? (this.currentImg.scale = this.bgOpacity, this.currentImg.width = this.decimal(a.width * this.currentImg.scale, 2), this.currentImg.height = this.decimal(a.height * this.currentImg.scale, 2), this.currentImg.x = a.x + this.distance.x + (a.width - this.currentImg.width) / 2, this.currentImg.y = a.y + this.distance.y + (a.height - this.currentImg.height) / 2) : (this.currentImg.x = a.x, this.currentImg.y = a.y + this.distance.y, this.currentImg.scale = 1), this.bg.style.opacity = this.bgOpacity, this.options.useTransform ? (this.bg.style.transition = "none", a.element.style.transition = "none", a.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px , 0) scale(" + this.currentImg.scale + ")") : (a.element.style.width = this.currentImg.width + "px", a.element.style.height = this.currentImg.height + "px", a.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px , 0)")) }, a.prototype.handleWrapPointerup = function () { const a = Math.round(.1 * this.windowWidth), b = this.index; Math.abs(this.distance.x) > a && (0 < this.distance.x && 0 < b ? this.index-- : 0 > this.distance.x && b < this.previewList.length - 1 && this.index++), this.handleWrapSwipe(), this.handleLastImg(b) }, a.prototype.handleImgPointerup = function () { const a = Math.round(.1 * this.windowHeight), b = this.previewList[this.index], c = Date.now(); if ("inertia" === this.currentImg.status && 200 > c - this.pointermoveTime && 1e3 < c - this.pinchTime) this.handleInertia(); else if ("verticalToClose" === this.currentImg.status && Math.abs(this.distance.y) >= a) this.close(); else if ("shrink" === this.currentImg.status || "verticalToClose" == this.currentImg.status && Math.abs(this.distance.y) < a) { if (this.isAnimating = !0, this.options.useTransform) this.bg.style.opacity = "1", b.element.style.transition = "transform " + this.options.duration + "ms ease-out, opacity " + this.options.duration + "ms ease-out", b.element.style.transform = "translate3d(" + b.x + "px, " + b.y + "px, 0) scale(1)"; else { const a = { bg: { opacity: { from: this.bgOpacity, to: 1 } }, img: { width: { from: this.currentImg.width, to: b.width }, height: { from: this.currentImg.height, to: b.height }, x: { from: this.currentImg.x, to: b.x }, y: { from: this.currentImg.y, to: b.y }, index: this.index } }; this.raf(a) } this.bgOpacity = 1, this.setCurrentImg(b.x, b.y, b.width, b.height, 1, 1, "") } !1 === this.isAnimating && (this.dragTarget = "", this.dragDirection = "") }, a.prototype.handleInertia = function () { function a() { c.x *= .95, c.y *= .95, d.currentImg.x = d.decimal(d.currentImg.x + c.x, 2), d.currentImg.y = d.decimal(d.currentImg.y + c.y, 2), d.handleBoundary(), b.element.style.transform = d.options.useTransform ? "translate3d(" + d.currentImg.x + "px, " + d.currentImg.y + "px, 0) scale(" + d.currentImg.scale + ")" : "translate3d(" + d.currentImg.x + "px, " + d.currentImg.y + "px, 0)", (1 < Math.abs(c.x) || 1 < Math.abs(c.y)) && (d.inertiaRafId = window.requestAnimationFrame(a)) } const b = this.previewList[this.index], c = { x: this.diff.x, y: this.diff.y }, d = this; this.inertiaRafId = window.requestAnimationFrame(a) }, a.prototype.handleWrapSwipe = function () { this.isWrapAnimating = !0; const a = { wrap: { x: { from: this.wrapX, to: -1 * (this.windowWidth * this.index) } } }; this.wrapRaf(a), this.counter.innerHTML = this.index + 1 + " / " + this.previewList.length }, a.prototype.handleLastImg = function (a) { if (this.index !== a) { if (1 < this.currentImg.scale) { const b = this.previewList[a]; if (this.options.useTransform) b.element.style.transition = "transform " + this.options.duration + "ms ease-out, opacity " + this.options.duration + "ms ease-out", b.element.style.transform = "translate3d(" + b.x + "px, " + b.y + "px, 0) scale(1)"; else { const c = { img: { width: { from: this.currentImg.width, to: b.width }, height: { from: this.currentImg.height, to: b.height }, x: { from: this.currentImg.x, to: b.x }, y: { from: this.currentImg.y, to: b.y }, index: a } }; this.raf(c) } b.element.style.cursor = "zoom-in" } const b = this.previewList[this.index]; this.setCurrentImg(b.x, b.y, b.width, b.height, 1, 1, "") } }, a.prototype.handleTransitionEnd = function (a) { "IMG" === a.target.tagName && (a.target === this.previewList[this.index].element && (this.isAnimating = !1, this.dragTarget = "", this.dragDirection = ""), "close" === this.status && (this.unbindEventListener(), this.container.remove())) }, a.prototype.decimal = function (a, b) { const c = Math.pow(10, b); return Math.round(a * c) / c }, a.prototype.getCenter = function (c, a) { const b = (c.x + a.x) / 2, d = (c.y + a.y) / 2; return { x: b, y: d } }, a.prototype.easeOut = function (a, b, c, d) { const e = c / d; return -(b - a) * e * (e - 2) + a }, a.prototype.raf = function (a) { function b(h) { void 0 === d && (d = h); let i = h - d; if (i > f && (i = f, e++), a.bg) { const b = c.decimal(c.easeOut(a.bg.opacity.from, a.bg.opacity.to, i, f), 5); c.bg.style.opacity = b } if (a.img.opacity) { const b = c.decimal(c.easeOut(a.img.opacity.from, a.img.opacity.to, i, f), 5); g.element.style.opacity = b } const j = c.decimal(c.easeOut(a.img.width.from, a.img.width.to, i, f), 2), k = c.decimal(c.easeOut(a.img.height.from, a.img.height.to, i, f), 2), l = c.decimal(c.easeOut(a.img.x.from, a.img.x.to, i, f), 2), m = c.decimal(c.easeOut(a.img.y.from, a.img.y.to, i, f), 2); g.element.style.width = j + "px", g.element.style.height = k + "px", g.element.style.transform = "translate3d(" + l + "px, " + m + "px, 0)", 1 >= e ? window.requestAnimationFrame(b) : (a.img.index === c.index && (c.isAnimating = !1, c.dragTarget = "", c.dragDirection = ""), "close" === c.status && (c.unbindEventListener(), c.container.remove())) } const c = this; let d, e = 0; const f = this.options.duration, g = this.previewList[a.img.index]; window.requestAnimationFrame(b) }, a.prototype.wrapRaf = function (a) { function b(g) { d === void 0 && (d = g); let h = g - d; h > f && (h = f, e++), c.wrapX = c.decimal(c.easeOut(a.wrap.x.from, a.wrap.x.to, h, f), 2), c.wrap.style.transform = "translate3d(" + c.wrapX + "px, 0, 0)", 1 >= e ? c.wrapRafId = window.requestAnimationFrame(b) : (c.isWrapAnimating = !1, c.dragTarget = "", c.dragDirection = "") } const c = this; let d, e = 0; const f = this.options.duration; this.wrapRafId = window.requestAnimationFrame(b) }, "function" == typeof define && define.amd ? define(function () { return a }) : "object" == typeof module && "object" == typeof exports ? module.exports = a : window.NonameGallery = a })();