!function () { "use strict"; function t(t) { this.options = Object.assign({}, this.defaults, t), this.container = null, this.bg = null, this.wrap = null, this.counter = null, this.imgList = null, this.windowWidth = 0, this.windowHeight = 0, this.previewList = [], this.index = this.options.index, this.wrapWidth = 0, this.wrapTranslateX = 0, this.currentImg = { x: 0, y: 0, width: 0, height: 0, scale: 0, status: "" }, this.bgOpacity = 1, this.start = { x: 0, y: 0 }, this.start2 = { x: 0, y: 0 }, this.step = { x: 0, y: 0 }, this.distance = { x: 0, y: 0 }, this.lastDistance = { x: 0, y: 0 }, this.lastMove = { x: 0, y: 0 }, this.lastCenter = null, this.lastDistanceRatio = 1, this.clickCount = 0, this.direction = "", this.dragTarget = "", this.isDown = !1, this.singleClickTimer = null, this.startTime = null, this.lastMoveTime = null, this.rafId = null } t.prototype.defaults = { list: [], index: 0, fadeInOut: !0, useTransition: !0, verticalZoom: !0, openKeyboard: !0, zoomToScreenCenter: !1, duration: 300, minScale: 1.5 }, t.prototype.init = function () { if (0 === this.options.list.length) throw new Error("options.list can not be empty array"); this.setWindowSize(), this.setPreviewList(); var t = this.previewList[this.index]; this.setCurrentImg(t.x, t.y, t.width, t.height, 1, ""), this.setWrap(), this.render(), this.setProperties(), this.open(), this.bindEventListener() }, t.prototype.setWindowSize = function () { this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight }, t.prototype.setPreviewList = function () { this.previewList = []; for (var t = 0, i = this.options.list.length; t < i; t++) { var e = this.options.list[t], s = e.getBoundingClientRect(), h = this.getImgSize(e.naturalWidth, e.naturalHeight), n = this.decimal(e.naturalWidth / h.width, 5); n < this.options.minScale && (n = this.options.minScale), this.previewList[t] = {}; e = this.previewList[t]; e.x = this.decimal((this.windowWidth - h.width) / 2, 2), e.y = this.decimal((this.windowHeight - h.height) / 2, 2), e.width = this.decimal(h.width, 2), e.height = this.decimal(h.height, 2), e.maxWidth = this.decimal(h.width * n, 2), e.maxHeight = this.decimal(h.height * n, 2), e.maxScale = n, e.thumbnail = {}, e.thumbnail.x = this.decimal(s.left, 2), e.thumbnail.y = this.decimal(s.top, 2), e.thumbnail.width = this.decimal(s.width, 2), e.thumbnail.height = this.decimal(s.height, 2), e.thumbnail.scale = this.decimal(s.width / h.width, 5) } }, t.prototype.setCurrentImg = function (t, i, e, s, h, n) { this.currentImg = { x: t, y: i, width: e, height: s, scale: h, status: n } }, t.prototype.setWrap = function () { this.wrapWidth = this.previewList.length * this.windowWidth, this.wrapTranslateX = this.index * this.windowWidth * -1 }, t.prototype.render = function () { var t = "opacity: 0;"; this.options.useTransition && (t += " transition: opacity " + this.options.duration + "ms;"); for (var i = '<div class="noname-gallery-container"><div class="noname-gallery-bg" style="' + t + '"></div><div class="noname-gallery-counter">' + (this.options.index + 1) + " / " + this.options.list.length + '</div><ul class="noname-gallery-wrap" style="width: ' + this.wrapWidth + "px; transform: translate3d(" + this.wrapTranslateX + 'px, 0, 0)">', e = 0, s = this.options.list.length; e < s; e++) { var h = this.previewList[e], t = ""; this.options.useTransition ? (t = "width: " + h.width + "px; height: " + h.height + "px;", this.index === e ? (t += "transform: translate3d(" + h.thumbnail.x + "px, " + h.thumbnail.y + "px, 0) scale(" + h.thumbnail.scale + ");", this.options.fadeInOut && (t += " opacity: 0;")) : t += "transform: translate3d(" + h.x + "px, " + h.y + "px, 0) scale(1);", t += " transition: transform " + this.options.duration + "ms, opacity " + this.options.duration + "ms;") : this.index === e ? (t = "width: " + h.thumbnail.width + "px; height: " + h.thumbnail.height + "px;", t += " transform: translate3d(" + h.thumbnail.x + "px, " + h.thumbnail.y + "px, 0);", this.options.fadeInOut && (t += " opacity: 0;")) : (t = "width: " + h.width + "px; height: " + h.height + "px;", t += " transform: translate3d(" + h.x + "px, " + h.y + "px, 0);"), t += " cursor: zoom-in;", i += '<li><img class="noname-gallery-img" src="' + this.options.list[e].src + '" alt="" style="' + t + '"></li>' } i += "</ul></div>", document.body.insertAdjacentHTML("beforeend", i) }, t.prototype.setProperties = function () { this.container = document.querySelector(".noname-gallery-container"), this.wrap = document.querySelector(".noname-gallery-wrap"), this.bg = document.querySelector(".noname-gallery-bg"), this.counter = document.querySelector(".noname-gallery-counter"), this.imgList = document.querySelectorAll(".noname-gallery-img"); for (var t = 0, i = this.imgList.length; t < i; t++)this.previewList[t].element = this.imgList[t] }, t.prototype.open = function () { var t = this.previewList[this.index]; this.options.useTransition ? (window.getComputedStyle(t.element).opacity, this.bg.style.opacity = "1", this.options.fadeInOut && (t.element.style.opacity = "1"), t.element.style.transform = "translate3d(" + t.x + "px," + t.y + "px, 0) scale(1)") : (t = { bg: { opacity: { from: 0, to: 1 } }, img: { width: { from: t.thumbnail.width, to: t.width }, height: { from: t.thumbnail.height, to: t.height }, x: { from: t.thumbnail.x, to: t.x }, y: { from: t.thumbnail.y, to: t.y } }, type: "bgAndImg", index: this.index }, this.options.fadeInOut && (t.img.opacity = { from: 0, to: 1 }), this.raf(t)) }, t.prototype.close = function () { var t = this.previewList[this.index]; this.options.useTransition ? (this.options.fadeInOut && (t.element.style.opacity = "0"), t.element.style.transition = "transform " + this.options.duration + "ms, opacity " + this.options.duration + "ms", t.element.style.transform = "translate3d(" + t.thumbnail.x + "px, " + t.thumbnail.y + "px, 0) scale(" + t.thumbnail.scale + ")", this.bg.style.opacity = "0") : (t = { bg: { opacity: { from: this.bgOpacity, to: 0 } }, img: { width: { from: this.currentImg.width, to: t.thumbnail.width }, height: { from: this.currentImg.height, to: t.thumbnail.height }, x: { from: this.currentImg.x, to: t.thumbnail.x }, y: { from: this.currentImg.y, to: t.thumbnail.y } }, type: "bgAndImg", index: this.index }, this.options.fadeInOut && (t.img.opacity = { from: 1, to: 0 }), this.raf(t)), this.unbindEventListener(), setTimeout(() => { this.container.remove() }, this.options.duration) }, t.prototype.bindEventListener = function () { this.handleMousedown = this.handleMousedown.bind(this), this.handleMousemove = this.handleMousemove.bind(this), this.handleMouseup = this.handleMouseup.bind(this), this.handleTouchstart = this.handleTouchstart.bind(this), this.handleTouchmove = this.handleTouchmove.bind(this), this.handleTouchend = this.handleTouchend.bind(this), this.handleTouchcancel = this.handleTouchcancel.bind(this), this.handleResize = this.handleResize.bind(this), this.handleKeydown = this.handleKeydown.bind(this), window.addEventListener("mousedown", this.handleMousedown), window.addEventListener("mousemove", this.handleMousemove), window.addEventListener("mouseup", this.handleMouseup), this.container.addEventListener("touchstart", this.handleTouchstart), this.container.addEventListener("touchmove", this.handleTouchmove), this.container.addEventListener("touchend", this.handleTouchend), this.container.addEventListener("touchcancel", this.handleTouchcancel), window.addEventListener("resize", this.handleResize), window.addEventListener("orientationchange", this.handleResize), window.addEventListener("keydown", this.handleKeydown) }, t.prototype.unbindEventListener = function () { window.removeEventListener("mousedown", this.handleMousedown), window.removeEventListener("mousemove", this.handleMousemove), window.removeEventListener("mouseup", this.handleMouseup), this.container.removeEventListener("touchstart", this.handleTouchstart), this.container.removeEventListener("touchmove", this.handleTouchmove), this.container.removeEventListener("touchend", this.handleTouchend), this.container.removeEventListener("touchcancel", this.handleTouchcancel), window.removeEventListener("resize", this.handleResize), window.removeEventListener("orientationchange", this.handleResize), window.removeEventListener("keydown", this.handleKeydown) }, t.prototype.handleMousedown = function (t) { 0 === t.button && (this.isDown = !0, this.start = { x: t.clientX, y: t.clientY }, this.lastMove = { x: t.clientX, y: t.clientY }, this.distance = { x: 0, y: 0 }, this.lastDistance = { x: 0, y: 0 }, this.clickCount = 1, this.direction = "", this.dragTarget = "") }, t.prototype.handleMousemove = function (t) { this.isDown && this.handleMove(t), t.preventDefault() }, t.prototype.handleMouseup = function (t) { this.isDown && (this.isDown = !1, "wrap" === this.dragTarget ? this.handleWrapMoveEnd() : "img" === this.dragTarget && this.handleImgMoveEnd(), 0 !== this.clickCount && ("noname-gallery-img" === t.target.className ? this.handleZoom({ x: t.clientX, y: t.clientY }) : this.close())) }, t.prototype.handleTouchstart = function (t) { this.isDown = !0, this.start = { x: t.touches[0].clientX, y: t.touches[0].clientY }, this.lastMove = { x: t.touches[0].clientX, y: t.touches[0].clientY }, 1 === t.touches.length ? (this.distance = { x: 0, y: 0 }, this.lastDistance = { x: 0, y: 0 }, this.direction = "", this.dragTarget = "", this.startTime = Date.now(), clearTimeout(this.singleClickTimer), this.clickCount++) : 2 === t.touches.length && (this.start2 = { x: t.touches[1].clientX, y: t.touches[1].clientY }, this.clickCount = 0, this.lastDistanceRatio = 1, this.lastCenter = null) }, t.prototype.handleTouchmove = function (t) { this.isDown && (1 === t.touches.length ? "shrink" !== this.currentImg.status && this.handleMove(t) : 2 === t.touches.length && "wrap" !== this.dragTarget && "verticalToClose" !== this.currentImg.status && ("" === this.dragTarget && (this.dragTarget = "img"), this.handlePinch(t))), t.preventDefault() }, t.prototype.handleTouchend = function (t) { var i; this.isDown && (0 === t.touches.length ? (this.isDown = !1, "wrap" === this.dragTarget ? this.handleWrapMoveEnd() : "img" === this.dragTarget && this.handleImgMoveEnd(), i = Date.now(), 1 < this.clickCount ? (this.clickCount = 0, this.handleZoom(this.start)) : i - this.startTime < 300 ? 1 === this.clickCount && (this.singleClickTimer = setTimeout(() => { this.clickCount = 0, this.close() }, 300)) : this.clickCount = 0) : 1 === t.touches.length && (this.start = { x: t.touches[0].clientX, y: t.touches[0].clientY }, this.lastMove = { x: t.touches[0].clientX, y: t.touches[0].clientY }, this.lastDistance = { x: this.distance.x, y: this.distance.y })), t.preventDefault() }, t.prototype.handleTouchcancel = function () { this.clickCount = 0 }, t.prototype.handleResize = function () { this.setWindowSize(), this.setPreviewList(); var t = this.previewList[this.index]; this.setCurrentImg(t.x, t.y, t.width, t.height, 1, ""), this.setWrap(); for (var i = 0, e = this.imgList.length; i < e; i++)(t = this.previewList[i]).element = this.imgList[i], t.element.style.width = t.width + "px", t.element.style.height = t.height + "px", this.options.useTransition ? (t.element.style.transform = "translate3d(" + t.x + "px, " + t.y + "px, 0) scale(1)", t.element.style.transition = "none") : t.element.style.transform = "translate3d(" + t.x + "px, " + t.y + "px, 0)", t.element.style.cursor = "zoom-in"; this.wrap.style.width = this.wrapWidth + "px", this.wrap.style.transform = "translate3d(" + this.wrapTranslateX + "px, 0, 0)", this.options.useTransition && (this.wrap.style.transition = "none"), this.clickCount = 0 }, t.prototype.handleKeydown = function (t) { this.options.openKeyboard && (27 === t.keyCode ? this.close() : [37, 38].includes(t.keyCode) ? this.handleSwitch("prev") : [39, 40].includes(t.keyCode) && this.handleSwitch("next")) }, t.prototype.handleZoom = function (t) { var i, e, s, h, n, r, o, a = this.previewList[this.index]; this.currentImg.width > a.width || this.currentImg.height > a.height ? (this.options.useTransition ? (a.element.style.transition = "transform " + this.options.duration + "ms, opacity " + this.options.duration + "ms", a.element.style.transform = "translate3d(" + a.x + "px," + a.y + "px, 0) scale(1)") : (n = { img: { width: { from: this.currentImg.width, to: a.width }, height: { from: this.currentImg.height, to: a.height }, x: { from: this.currentImg.x, to: a.x }, y: { from: this.currentImg.y, to: a.y } }, type: "img", index: this.index }, this.raf(n)), a.element.style.cursor = "zoom-in", this.setCurrentImg(a.x, a.y, a.width, a.height, 1, "")) : (s = this.windowWidth / 2, h = this.windowHeight / 2, r = this.decimal((t.x - a.x) * a.maxScale, 2), o = this.decimal((t.y - a.y) * a.maxScale, 2), a.maxWidth > this.windowWidth ? 0 < (i = this.options.zoomToScreenCenter ? s - r : t.x - r) ? i = 0 : i < this.windowWidth - a.maxWidth && (i = this.windowWidth - a.maxWidth) : i = (this.windowWidth - a.maxWidth) / 2, i = this.decimal(i, 2), a.maxHeight > this.windowHeight ? 0 < (e = this.options.zoomToScreenCenter ? h - o : t.y - o) ? e = 0 : e < this.windowHeight - a.maxHeight && (e = this.windowHeight - a.maxHeight) : e = (this.windowHeight - a.maxHeight) / 2, e = this.decimal(e, 2), this.options.useTransition ? (a.element.style.transition = "transform " + this.options.duration + "ms, opacity " + this.options.duration + "ms", a.element.style.transform = "translate3d(" + i + "px," + e + "px, 0) scale(" + a.maxScale + ")") : (n = { img: { width: { from: a.width, to: a.maxWidth }, height: { from: a.height, to: a.maxHeight }, x: { from: a.x, to: i }, y: { from: a.y, to: e } }, type: "img", index: this.index }, this.raf(n)), a.element.style.cursor = "zoom-out", this.setCurrentImg(i, e, a.maxWidth, a.maxHeight, a.maxScale, "")) }, t.prototype.handleMove = function (t) { var i = ("touchmove" === t.type ? t.touches[0] : t).clientX, t = ("touchmove" === t.type ? t.touches[0] : t).clientY; this.step = { x: i - this.lastMove.x, y: t - this.lastMove.y }, this.distance.x = i - this.start.x + this.lastDistance.x, this.distance.y = t - this.start.y + this.lastDistance.y, this.lastMove = { x: i, y: t }, this.lastMoveTime = Date.now(), (10 < Math.abs(this.distance.x) || 10 < Math.abs(this.distance.y)) && (this.clickCount = 0, this.getDirection(), this.getDragTarget(), "wrap" === this.dragTarget ? this.handleWrapMove() : "img" === this.dragTarget && this.handleImgMove()) }, t.prototype.handlePinch = function (t) { var i = .7, e = this.previewList[this.index], s = { x: t.touches[0].clientX, y: t.touches[0].clientY }, h = { x: t.touches[1].clientX, y: t.touches[1].clientY }, n = this.getDistance(s, h) / this.getDistance(this.start, this.start2), t = n / this.lastDistanceRatio; this.currentImg.scale *= t, this.currentImg.width *= t, this.currentImg.height *= t, this.currentImg.scale > e.maxScale ? (this.currentImg.scale = e.maxScale, t = 1) : this.currentImg.scale < i && (this.currentImg.scale = i, t = 1), this.currentImg.scale < 1 ? this.currentImg.status = "shrink" : this.currentImg.status = "", this.currentImg.width > e.maxWidth ? this.currentImg.width = e.maxWidth : this.currentImg.width < e.width * i && (this.currentImg.width = this.decimal(e.width * i, 2)), this.currentImg.height > e.maxHeight ? this.currentImg.height = e.maxHeight : this.currentImg.height < e.height * i && (this.currentImg.height = this.decimal(e.height * i, 2)), this.lastDistanceRatio = n; h = this.getCenter(s, h); this.currentImg.x = this.currentImg.x - (t - 1) * (h.x - this.currentImg.x), this.currentImg.y = this.currentImg.y - (t - 1) * (h.y - this.currentImg.y), this.lastCenter && (this.currentImg.x = this.currentImg.x + h.x - this.lastCenter.x, this.currentImg.y = this.currentImg.y + h.y - this.lastCenter.y), this.lastCenter = h, this.handleBoundary(), this.options.useTransition ? (e.element.style.transition = "none", e.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0) scale(" + this.currentImg.scale + ")") : (e.element.style.width = this.currentImg.width + "px", e.element.style.height = this.currentImg.height + "px", e.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0)") }, t.prototype.handleBoundary = function (t) { this.currentImg.width > this.windowWidth ? 0 < this.currentImg.x ? this.currentImg.x = 0 : this.currentImg.x < this.windowWidth - this.currentImg.width && (this.currentImg.x = this.windowWidth - this.currentImg.width) : this.currentImg.x = (this.windowWidth - this.currentImg.width) / 2, this.currentImg.height > this.windowHeight ? 0 < this.currentImg.y ? this.currentImg.y = 0 : this.currentImg.y < this.windowHeight - this.currentImg.height && (this.currentImg.y = this.windowHeight - this.currentImg.height) : this.currentImg.y = (this.windowHeight - this.currentImg.height) / 2 }, t.prototype.getImgSize = function (t, i) { var e, s = t / i, i = this.windowWidth / this.windowHeight <= s ? t > this.windowWidth ? (e = this.windowWidth, this.windowWidth / t * i) : (e = t, i) : i > this.windowHeight ? (e = this.windowHeight / i * t, this.windowHeight) : (e = t, i); return { width: e, height: i } }, t.prototype.getDirection = function () { "" === this.direction && (Math.abs(this.distance.x) > Math.abs(this.distance.y) ? this.direction = "h" : this.direction = "v") }, t.prototype.getDragTarget = function () { var t, i; "" === this.dragTarget && (i = t = !1, this.currentImg.width > this.windowWidth ? (0 < this.step.x && 0 === this.currentImg.x || this.step.x < 0 && this.currentImg.x === this.windowWidth - this.currentImg.width) && (t = !0) : this.currentImg.width >= this.previewList[this.index].width && (i = !0), "h" === this.direction && (t || i) ? this.dragTarget = "wrap" : this.dragTarget = "img") }, t.prototype.getDistance = function (t, i) { var e = i.x - t.x, t = i.y - t.y; return Math.hypot(e, t) }, t.prototype.handleWrapMove = function () { var t, i; 0 < this.wrapTranslateX || this.wrapTranslateX < -1 * (this.previewList.length - 1) * this.windowWidth ? this.wrapTranslateX += .3 * this.step.x : (this.wrapTranslateX += this.step.x, t = (this.index - 1) * this.windowWidth * -1, i = (this.index + 1) * this.windowWidth * -1, this.wrapTranslateX > t ? this.wrapTranslateX = t : this.wrapTranslateX < i && (this.wrapTranslateX = i)), this.options.useTransition && (this.wrap.style.transition = "none"), this.wrap.style.transform = "translate3d(" + this.wrapTranslateX + "px, 0, 0)" }, t.prototype.handleImgMove = function () { var t = this.previewList[this.index]; this.currentImg.width > this.windowWidth || this.currentImg.height > this.windowHeight ? (this.currentImg.x += this.step.x, this.currentImg.y += this.step.y, this.handleBoundary(), this.currentImg.status = "inertia", this.options.useTransition ? (t.element.style.transition = "none", t.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0) scale(" + this.currentImg.scale + ")") : t.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0)") : "v" === this.direction && this.currentImg.width <= t.width && this.currentImg.height <= t.height && (this.currentImg.status = "verticalToClose", this.bgOpacity = this.decimal(1 - Math.abs(this.distance.y) / (this.windowHeight / 1.2), 5), this.bgOpacity < 0 && (this.bgOpacity = 0), this.options.verticalZoom ? (this.currentImg.scale = this.bgOpacity, this.currentImg.width = this.decimal(t.width * this.currentImg.scale, 2), this.currentImg.height = this.decimal(t.height * this.currentImg.scale, 2), this.currentImg.x = t.x + this.distance.x + (t.width - this.currentImg.width) / 2, this.currentImg.y = t.y + this.distance.y + (t.height - this.currentImg.height) / 2) : (this.currentImg.x = t.x, this.currentImg.y = t.y + this.distance.y, this.currentImg.scale = 1), this.bg.style.opacity = this.bgOpacity, this.options.useTransition ? (this.bg.style.transition = "none", t.element.style.transition = "none", t.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px , 0) scale(" + this.currentImg.scale + ")") : (t.element.style.width = this.currentImg.width + "px", t.element.style.height = this.currentImg.height + "px", t.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px , 0)")) }, t.prototype.handleWrapMoveEnd = function () { var t = Math.round(.15 * this.windowWidth), i = this.index; Math.abs(this.distance.x) > t && (0 < this.distance.x ? 0 < i && this.index-- : i < this.previewList.length - 1 && this.index++, this.handleLastItem(i)), this.handleSwipe() }, t.prototype.handleImgMoveEnd = function () { var t = Math.round(.15 * this.windowHeight), i = this.previewList[this.index]; "inertia" === this.currentImg.status && Date.now() - this.lastMoveTime < 100 ? this.handleInertia() : "verticalToClose" === this.currentImg.status && Math.abs(this.distance.y) >= t ? (this.close(), this.bgOpacity = 1) : ("shrink" === this.currentImg.status || "verticalToClose" == this.currentImg.status && Math.abs(this.distance.y) < t) && (this.options.useTransition ? (i.element.style.transition = "transform " + this.options.duration + "ms, opacity " + this.options.duration + "ms", i.element.style.transform = "translate3d(" + i.x + "px, " + i.y + "px, 0) scale(1)", this.bg.style.opacity = "1") : (t = { bg: { opacity: { from: this.bgOpacity, to: 1 } }, img: { width: { from: this.currentImg.width, to: i.width }, height: { from: this.currentImg.height, to: i.height }, x: { from: this.currentImg.x, to: i.x }, y: { from: this.currentImg.y, to: i.y } }, type: "bgAndImg", index: this.index }, this.raf(t)), this.bgOpacity = 1, this.setCurrentImg(i.x, i.y, i.width, i.height, 1, "")) }, t.prototype.handleInertia = function () { var t = this.previewList[this.index], i = this.currentImg.x, e = this.currentImg.y; this.currentImg.x += 18 * this.step.x, this.currentImg.y += 18 * this.step.y, this.handleBoundary(), this.options.useTransition ? (t.element.style.transition = "transform " + this.options.duration + "ms ease-out", t.element.style.transform = "translate3d(" + this.currentImg.x + "px, " + this.currentImg.y + "px, 0) scale(" + this.currentImg.scale + ")") : (e = { img: { opacity: { from: 1, to: 1 }, width: { from: this.currentImg.width, to: this.currentImg.width }, height: { from: this.currentImg.height, to: this.currentImg.height }, x: { from: i, to: this.currentImg.x }, y: { from: e, to: this.currentImg.y } }, type: "img", index: this.index }, this.raf(e)) }, t.prototype.handleSwitch = function (t) { var i = this.index; "prev" === t ? 0 < this.index && this.index-- : this.index < this.previewList.length - 1 && this.index++, this.handleLastItem(i), i !== this.index && this.handleSwipe() }, t.prototype.handleLastItem = function (t) { var i = this.previewList[t], e = { width: this.currentImg.width, height: this.currentImg.height, x: this.currentImg.x, y: this.currentImg.y, scale: this.currentImg.scale, status: this.currentImg.status }; t !== this.index && ((e.width > i.width || e.height > i.height) && (this.options.useTransition ? (i.element.style.transition = "transform " + this.options.duration + "ms, opacity " + this.options.duration + "ms", i.element.style.transform = "translate3d(" + i.x + "px, " + i.y + "px, 0) scale(1)") : (t = { img: { width: { from: e.width, to: i.width }, height: { from: e.height, to: i.height }, x: { from: e.x, to: i.x }, y: { from: e.y, to: i.y } }, type: "img", index: t }, this.raf(t)), i.element.style.cursor = "zoom-in"), i = this.previewList[this.index], this.setCurrentImg(i.x, i.y, i.width, i.height, 1, "")) }, t.prototype.handleSwipe = function () { var t, i = this.windowWidth * this.index * -1; this.options.useTransition ? (this.wrap.style.transition = "transform " + this.options.duration + "ms", this.wrap.style.transform = "translate3d(" + i + "px, 0, 0)") : (t = { wrap: { x: { from: this.wrapTranslateX, to: i } }, type: "wrap" }, this.raf(t)), this.wrapTranslateX = i, this.counter.innerHTML = this.index + 1 + " / " + this.previewList.length }, t.prototype.decimal = function (t, i) { i = Math.pow(10, i); return Math.round(t * i) / i }, t.prototype.getCenter = function (t, i) { return { x: (t.x + i.x) / 2, y: (t.y + i.y) / 2 } }, t.prototype.easeOut = function (t, i, e, s) { return -(i - t) * (e /= s) * (e - 2) + t }, t.prototype.raf = function (e) { var s, h = this, n = 0, r = this.options.duration; this.rafId = window.requestAnimationFrame(function t(i) { void 0 === s && (s = i); i -= s; r < i && (i = r, n++), n < 2 && ("bgAndImg" === e.type ? (h.bgAnimate(e, i, r), h.imgAnimate(e, i, r)) : "wrap" === e.type ? h.wrapAnimate(e, i, r) : "img" === e.type && h.imgAnimate(e, i, r), h.rafId = window.requestAnimationFrame(t)) }) }, t.prototype.bgAnimate = function (t, i, e) { e = this.decimal(this.easeOut(t.bg.opacity.from, t.bg.opacity.to, i, e), 5); this.bg.style.opacity = e }, t.prototype.imgAnimate = function (t, i, e) { var s = this.previewList[t.index], h = this.decimal(this.easeOut(t.img.width.from, t.img.width.to, i, e), 2), n = this.decimal(this.easeOut(t.img.height.from, t.img.height.to, i, e), 2), r = this.decimal(this.easeOut(t.img.x.from, t.img.x.to, i, e), 2), o = this.decimal(this.easeOut(t.img.y.from, t.img.y.to, i, e), 2); t.img.opacity && (e = this.decimal(this.easeOut(t.img.opacity.from, t.img.opacity.to, i, e), 5), s.element.style.opacity = e), s.element.style.width = h + "px", s.element.style.height = n + "px", s.element.style.transform = "translate3d(" + r + "px, " + o + "px, 0)" }, t.prototype.wrapAnimate = function (t, i, e) { e = this.decimal(this.easeOut(t.wrap.x.from, t.wrap.x.to, i, e), 2); this.wrap.style.transform = "translate3d(" + e + "px, 0, 0)" }, "function" == typeof define && define.amd ? define(function () { return t }) : "object" == typeof module && "object" == typeof exports ? module.exports = t : window.NonameGallery = t }();